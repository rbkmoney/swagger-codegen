-module({{packageName}}_server).

-behaviour(supervisor).

-define(DEFAULT_ACCEPTORS_POOLSIZE, 100).
-define(DEFAULT_LOGIC_HANDLER, {{packageName}}_default_logic_handler).

-export([child_spec/2]).
-export([start_link/1]).

-export([init/1]).

-type id() :: atom().
-type params() :: #{
    ip                  := inet:ip_address(),
    port                := inet:port_number(),
    net_opts            := [],
    logic_handler       => module(),
    cowboy_extra_opts   => list(),
    swagger_schema      => {{packageName}}_schema_validator:raw_schema(),
    validator_pool_opts => {{packageName}}_schema_validator:pool_options()
}.

-export_type([id/0]).
-export_type([params/0]).

-spec child_spec(id(), params()) -> supervisor:child_spec().

child_spec(ID, Params) ->
    #{id => {?MODULE, ID}, start => {?MODULE, start_link, [Params]}, type => supervisor}.

-spec start_link(params()) ->
    {ok, pid()}.

start_link(Params) ->
    supervisor:start_link(?MODULE, Params).

-spec init(params()) ->
    {ok, {supervisor:sup_flags(), [supervisor:child_spec()]}}.

init(Params) ->
    {ok, {
        #{strategy => rest_for_one},
        [
            child_spec_(validator, Params),
            child_spec_(server, Params)
        ]
    }}.

child_spec_(validator, Params) ->
    {{packageName}}_schema_validator_sup:child_spec(maps:with(
        [validator_pool_opts, swagger_schema],
        Params
    ));
child_spec_(server, #{
    ip            := IP ,
    port          := Port,
    net_opts      := NetOpts
} = Params) ->
    {Transport, TransportOpts} = get_socket_transport(IP, Port, NetOpts),
    AcceptorsPool = ?DEFAULT_ACCEPTORS_POOLSIZE,
    LogicHandler  = maps:get(logic_handler, Params, ?DEFAULT_LOGIC_HANDLER),
    ExtraOpts     = maps:get(cowboy_extra_opts, Params, []),
    CowboyOpts    = get_cowboy_config(LogicHandler, ExtraOpts),
    ranch:child_spec(?MODULE, AcceptorsPool,
        Transport, TransportOpts, cowboy_protocol, CowboyOpts).

get_socket_transport(IP, Port, Options) ->
    Opts = [
        {ip,   IP},
        {port, Port}
    ],
    case {{packageName}}_utils:get_opt(ssl, Options) of
        SslOpts = [_|_] ->
            {ranch_ssl, Opts ++ SslOpts};
        undefined ->
            {ranch_tcp, Opts}
    end.

get_cowboy_config(LogicHandler, ExtraOpts) ->
    get_cowboy_config(LogicHandler, ExtraOpts, get_default_opts(LogicHandler)).

get_cowboy_config(_LogicHandler, [], Opts) ->
    Opts;

get_cowboy_config(LogicHandler, [{env, Env} | Rest], Opts) ->
    NewEnv = case proplists:get_value(dispatch, Env) of
        undefined ->
            [get_default_dispatch(LogicHandler) | Env];
        _ ->
            Env
    end,
    get_cowboy_config(LogicHandler, Rest, store_key(env, NewEnv, Opts));

get_cowboy_config(LogicHandler, [{Key, Value} | Rest], Opts) ->
    get_cowboy_config(LogicHandler, Rest, store_key(Key, Value, Opts)).

get_default_dispatch(LogicHandler) ->
    Paths = {{packageName}}_router:get_paths(LogicHandler),
    {dispatch, cowboy_router:compile(Paths)}.

get_default_opts(LogicHandler) ->
    [{env, [get_default_dispatch(LogicHandler)]}].

store_key(Key, Value, Opts) ->
    lists:keystore(Key, 1, Opts, {Key, Value}).
