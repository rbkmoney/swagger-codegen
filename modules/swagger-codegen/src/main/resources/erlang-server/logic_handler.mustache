-module({{packageName}}_logic_handler).

-export([handle_request/4]).

-type response() :: {
    Status  :: cowboy:http_status(),
    Headers :: cowboy:http_headers(),
    Body    :: {{packageName}}:object() | [{{packageName}}:object()] | undefined
}.

-export_type([response/0]).


%% Behaviour definition

{{#authMethods}}
    {{#isApiKey}}
-export([authorize_api_key/3]).
    {{/isApiKey}}
{{/authMethods}}

{{#authMethods}}
    {{#isApiKey}}
-callback authorize_api_key(
    OperationID :: {{packageName}}:operation_id(),
    ApiKey      :: {{packageName}}:api_key()
) ->
    Result :: boolean() | {boolean(), {{packageName}}:auth_context()}.
    {{/isApiKey}}
{{/authMethods}}


-callback handle_request(
    OperationID :: {{packageName}}:operation_id(),
    Request     :: {{packageName}}:object(),
    Context     :: {{packageName}}:request_context()
) ->
    {ok | error, response()}.

-spec handle_request(
    Handler     :: module(),
    OperationID :: {{packageName}}:operation_id(),
    Request     :: {{packageName}}:object(),
    Context     :: {{packageName}}:request_context()
) ->
    {ok | error, response()}.


%% API

handle_request(Handler, OperationID, Request, Context) ->
    Handler:handle_request(OperationID, Request, Context).

{{#authMethods}}
    {{#isApiKey}}
-spec authorize_api_key(
    Handler     :: module(),
    OperationID :: {{packageName}}:operation_id(),
    ApiKey      :: {{packageName}}:api_key()
) ->
    Result :: false | {true, {{packageName}}:auth_context()}.
authorize_api_key(Handler, OperationID, ApiKey) ->
    Handler:authorize_api_key(OperationID, ApiKey).
    {{/isApiKey}}
{{/authMethods}}
