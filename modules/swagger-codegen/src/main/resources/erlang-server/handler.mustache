%% basic handler
-module({{classname}}).

%% Cowboy REST callbacks
-export([allowed_methods/2]).
-export([init/3]).
-export([rest_init/2]).
-export([allow_missing_post/2]).
-export([content_types_accepted/2]).
-export([content_types_provided/2]).
-export([delete_resource/2]).
-export([is_authorized/2]).
-export([known_content_type/2]).
-export([malformed_request/2]).
-export([valid_content_headers/2]).
-export([valid_entity_length/2]).

%% Handlers
-export([handle_request_json/2]).

-record(state, {
    operation_id,
    logic_handler,
    validator_state,
    context=#{}
}).

init(_Transport, Req, Opts) ->
    {upgrade, protocol, cowboy_rest, Req, Opts}.

rest_init(Req0, [LogicHandler, ValidatorState]) ->
    {Method, Req} = cowboy_req:method(Req0),
    OperationID = {{packageName}}_router:get_operation_id(Method, ?MODULE),
    State = #state{
        operation_id = OperationID,
        logic_handler = LogicHandler,
        validator_state = ValidatorState
    },
    {ok, Req, State}.

{{#operations}}{{#operation}}
allowed_methods(Req, State = #state{operation_id = '{{operationId}}'}) ->
    {[<<"{{httpMethod}}">>], Req, State};
{{/operation}}{{/operations}}
allowed_methods(Req, State) ->
    {[], Req, State}.

{{#operations}}{{#operation}}
is_authorized(Req0, State = #state{operation_id = '{{operationId}}' = OperationID, logic_handler = LogicHandler}) ->
{{#authMethods}}
  {{#isApiKey}}
    From = {{#isKeyInQuery}}qs_val{{/isKeyInQuery}}{{#isKeyInHeader}}header{{/isKeyInHeader}},
    case {{packageName}}_auth:authorize_api_key(From, "{{keyParamName}}", OperationID, Req0, LogicHandler) of
        {true, Context, Req} ->  {true, Req, State#state{context = Context}};
        {false, AuthHeader, Req} ->  {{false, AuthHeader}, Req, State}
    end;
  {{/isApiKey}}
{{/authMethods}}
{{/operation}}{{/operations}}
is_authorized(Req, State) ->
    {{false, <<"">>}, Req, State}.

content_types_accepted(Req, State) ->
    {[
        {<<"application/json">>, handle_request_json}
    ], Req, State}.

{{#operations}}{{#operation}}
valid_content_headers(Req0, State = #state{operation_id = '{{operationId}}'}) ->
    Headers = [{{#headerParams}}"{{baseName}}"{{#hasMore}},{{/hasMore}}{{/headerParams}}],
    {Result, Req} = validate_headers(Headers, Req0),
    {Result, Req, State};
{{/operation}}{{/operations}}
valid_content_headers(Req, State) ->
    {false, Req, State}.

content_types_provided(Req, State) ->
    {[
        {<<"application/json">>, handle_request_json}
    ], Req, State}.

malformed_request(Req, State) ->
    {false, Req, State}.

allow_missing_post(Req, State) ->
    {false, Req, State}.

delete_resource(Req, State) ->
    handle_request_json(Req, State).

known_content_type(Req, State) ->
    {true, Req, State}.

valid_entity_length(Req, State) ->
    %% @TODO check the length
    {true, Req, State}.

%%%%
handle_request_json(
    Req0,
    State = #state{
        operation_id = OperationID,
        logic_handler = LogicHandler,
        validator_state = ValidatorState
    }
) ->
    case {{packageName}}_api:populate_request(OperationID, Req0, ValidatorState) of
        {ok, Populated, Req1} ->
            case LogicHandler:handle_request(OperationID, Populated) of
                {Code, Headers, Body} ->
                    {{packageName}}_api:validate_response(OperationID, Code, Body , ValidatorState),
                    PreparedBody = jsx:encode(Body),
                    {ok, Req} = cowboy_req:reply(Code, Headers, PreparedBody, Req1),
                    {halt, Req, State}
            end;
        {error, _Reason, Req1} ->
            {false, Req1, State}
    end.

validate_headers(_, Req) -> {true, Req}.
