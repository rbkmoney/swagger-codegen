%% basic handler
-module({{packageName}}_handler).

-include_lib("{{packageName}}_router.hrl").


-export([allowed_methods/2]).
-export([init/3]).
-export([rest_init/2]).
-export([allow_missing_post/2]).
-export([content_types_accepted/2]).
-export([content_types_provided/2]).
-export([delete_resource/2]).
-export([is_authorized/2]).
-export([known_content_type/2]).
-export([malformed_request/2]).
-export([valid_content_headers/2]).
-export([valid_entity_length/2]).
-export([handle/2]).

-record(state, {
    method,
    operationID
}).

init(_Transport, Req, [OperationID]) ->
    {upgrade, protocol, cowboy_rest, Req, [OperationID]}.

rest_init(Req0, [OperationID]) ->
    {Method, Req} = cowboy_req:method(Req0),
    {ok, Req, #state{method = Method, operationID = OperationID}}.

allowed_methods(Req, State = #state{operationID = ID}) ->
    Op = get_operation_by_id(ID),
    {[list_to_binary(Op#operation.httpMethod)], Req, State}.

is_authorized(Req, State) ->
    {true, Req, State}.

content_types_accepted(Req, State) ->
    {[
        {<<"application/json">>, handle}
    ], Req, State}.
%%get head

valid_content_headers(Req, State) ->
    {true, Req, State}.

content_types_provided(Req, State) ->
    {[
        {<<"application/json">>, handle}
    ], Req, State}.

malformed_request(Req, State) ->
    {false, Req, State}.

allow_missing_post(Req, State) ->
    {false, Req, State}.

delete_resource(Req, State) ->
    {true, Req, State}.

known_content_type(Req, State) ->
    {true, Req, State}.

valid_entity_length(Req, State) ->
    {true, Req, State}.

%%%%
handle(Req0, State = #state{operationID = ID}) ->
    Handler = {{packageName}}_api_config:get_handler(ID),
    case Handler:handle() of
        {ok, {Headers, Body}} ->
            Req1 = lists:foldl(
                fun({K, V}, Req) ->
                    cowboy_req:set_resp_header(K, V, Req)
                end,
                Req0,
                Headers
            ),
            Req = cowboy_req:set_resp_body(Body, Req1),
            {true, Req, State};
        {error, {Status, Headers, Reason}} ->
            {ok, Req} = cowboy_req:reply(Status, Headers, Reason, Req0),
            {halt, Req, State}
    end.

get_operation_by_id(OperationID) ->
    get_operation_by_id(OperationID, {{packageName}}_router:get_operations()).

get_operation_by_id(OperationID, []) ->
    error({unknown_operation, OperationID});
get_operation_by_id(OperationID, [R = #operation{id = OperationID}| _]) ->
    R;
get_operation_by_id(OperationID, [_| T]) ->
    get_operation_by_id(OperationID, T).

