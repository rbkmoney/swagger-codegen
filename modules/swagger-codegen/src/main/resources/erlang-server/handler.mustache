%% basic handler
-module({{classname}}).

-include("{{packageName}}_request.hrl").

%% Cowboy REST callbacks
-export([allowed_methods/2]).
-export([init/3]).
-export([rest_init/2]).
-export([allow_missing_post/2]).
-export([content_types_accepted/2]).
-export([content_types_provided/2]).
-export([delete_resource/2]).
-export([is_authorized/2]).
-export([known_content_type/2]).
-export([malformed_request/2]).
-export([valid_content_headers/2]).
-export([valid_entity_length/2]).

%% Handlers
-export([handle_request_json/2]).

-record(state, {
    operation_id,
    logic_handler,
    validator_state,
    parsed_request,
    context=#{}
}).

init(_Transport, Req, Opts) ->
    {upgrade, protocol, cowboy_rest, Req, Opts}.

rest_init(Req0, [LogicHandler, ValidatorState]) ->
    ParsingParams = [method, bindings, qs_vals, headers],
    {PR = #parsed_request{method = Method}, Req} = {{packageName}}_utils:parse_request(ParsingParams, Req0),
    OperationID = get_operation(Method),
    State = #state{
        operation_id = OperationID,
        logic_handler = LogicHandler,
        validator_state = ValidatorState,
        parsed_request = PR
    },
    {ok, Req, State}.

{{#operations}}{{#operation}}
allowed_methods(Req, State = #state{operation_id = '{{operationId}}'}) ->
    {[<<"{{httpMethod}}">>], Req, State};
{{/operation}}{{/operations}}
allowed_methods(Req, State) ->
    {[], Req, State}.

{{#operations}}{{#operation}}
is_authorized(Req, State = #state{operation_id = '{{operationId}}' = OperationID, logic_handler = LogicHandler, parsed_request = PR}) ->
{{#authMethods}}
  {{#isApiKey}}
    From = {{#isKeyInQuery}}qs_val{{/isKeyInQuery}}{{#isKeyInHeader}}header{{/isKeyInHeader}},
    case {{packageName}}_auth:authorize_api_key(From, "{{keyParamName}}", OperationID, PR, LogicHandler) of
        {true, Context} ->  {true, Req, State#state{context = Context}};
        {false, AuthHeader} ->  {{false, AuthHeader}, Req, State}
    end;
  {{/isApiKey}}
{{/authMethods}}
{{/operation}}{{/operations}}
is_authorized(Req, State) ->
    {{false, <<"">>}, Req, State}.

content_types_accepted(Req, State) ->
    {[
        {<<"application/json">>, handle_request_json}
    ], Req, State}.

{{#operations}}{{#operation}}
valid_content_headers(Req0, State = #state{operation_id = '{{operationId}}'}) ->
    Headers = [{{#headerParams}}"{{baseName}}"{{#hasMore}},{{/hasMore}}{{/headerParams}}],
    {Result, Req} = validate_headers(Headers, Req0),
    {Result, Req, State};
{{/operation}}{{/operations}}
valid_content_headers(Req, State) ->
    {false, Req, State}.

content_types_provided(Req, State) ->
    {[
        {<<"application/json">>, handle_request_json}
    ], Req, State}.

malformed_request(Req, State) ->
    {false, Req, State}.

allow_missing_post(Req, State) ->
    {false, Req, State}.

delete_resource(Req, State) ->
    handle_request_json(Req, State).

known_content_type(Req, State) ->
    {true, Req, State}.

valid_entity_length(Req0, State = #state{parsed_request = PR0}) ->
    %% @TODO check the length
    {PR, Req} = {{packageName}}_utils:parse_request(body, PR0, Req0),
    {true, Req, State#state{parsed_request = PR}}.

%%%%
handle_request_json(
  Req0,
  State = #state{
      operation_id = OperationID,
      logic_handler = LogicHandler,
      validator_state = ValidatorState,
      parsed_request = PR
  }
) ->
    Populated = populate_model(OperationID, PR, ValidatorState),
    case LogicHandler:handle_request(OperationID, Populated) of
        {ok, {Headers, Body}} ->
            Req1 = swagger_utils:set_resp_headers(Headers, Req0),
            Req = cowboy_req:set_resp_body(Body, Req1),
            {true, Req, State};
        {error, {Status, Headers, Reason}} ->
            {ok, Req} = cowboy_req:reply(Status, Headers, Reason, Req0),
            {halt, Req, State}
    end.


    {{#operations}}{{#operation}}
populate_model('{{operationId}}', PR, ValidatorState) ->
  Params = [
  {{#allParams}}
      {{#isFormParam}}{ {{dataType}}, form, "{{baseName}}"}{{#hasMore}},{{/hasMore}}{{/isFormParam}}
      {{#isQueryParam}}{ {{dataType}}, qs_val, '{{baseName}}'}{{#hasMore}},{{/hasMore}}{{/isQueryParam}}
      {{#isPathParam}}{ {{dataType}}, path, '{{baseName}}'}{{#hasMore}},{{/hasMore}}{{/isPathParam}}
      {{#isHeaderParam}}{ {{dataType}}, header, "{{baseName}}"}{{#hasMore}},{{/hasMore}}{{/isHeaderParam}}
      {{#isBodyParam}}{{#baseType}}{ model, body, "{{dataType}}"}{{/baseType}}{{#hasMore}},{{/hasMore}}{{/isBodyParam}}
  {{/allParams}}
  ],
  populate_model_fields(Params, PR, ValidatorState){{#hasMore}};{{/hasMore}}{{/operation}}{{#hasMore}};{{/hasMore}}{{^hasMore}}.{{/hasMore}}{{/operations}}


populate_model_fields(Params, PR, ValidatorState) ->
  populate_model_fields(Params, PR, ValidatorState, #{}).

populate_model_fields([], _, _, Model) ->
  Model;

populate_model_fields([FieldParams | T], PR, ValidatorState, Model) ->
  {ok, K, V} =  populate_model_field(FieldParams, PR, ValidatorState),
  populate_model_fields(T, PR, ValidatorState, maps:put(K, V, Model)).

populate_model_field({model, body, Name}, #parsed_request{body = Body}, ValidatorState) ->
  PreparedBody = case Body of
      <<"">> -> <<"">>;
      _ -> jsx:decode(Body, [return_maps])
  end,
  Definition =  list_to_binary("#/definitions/" ++ Name),
  try
    jesse_schema_validator:validate_with_state(
        [{<<"$ref">>, Definition}],
        PreparedBody,
        ValidatorState
    ),
    {ok, Name, PreparedBody}
  catch
      _:E ->
        throw({bad_request, E})
  end;

populate_model_field({_DataType, qs_val, Name}, #parsed_request{qs_vals = QS}, _) ->
  Value = {{packageName}}_utils:get_opt(Name, QS),
  {ok, Name, Value};

populate_model_field({_DataType, header, Name}, #parsed_request{headers = Headers}, _) ->
    Value = {{packageName}}_utils:get_opt(Name, Headers),
    {ok, Name, Value};

populate_model_field({_DataType, path, Name}, #parsed_request{bindings = Bindings}, _) ->
    Value = {{packageName}}_utils:get_opt(Name, Bindings),
    {ok, Name, Value}.

validate_headers(_, Req) -> {true, Req}.

get_operation(Method) ->
  get_operation(Method, {{packageName}}_router:get_operations()).

get_operation(_, []) ->
    undefined;

get_operation(Method, [{OperationID, _, Method, ?MODULE} | _]) ->
    OperationID;

get_operation(Method, [R | T]) ->
  get_operation(Method, T).

